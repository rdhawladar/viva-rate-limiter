name: Deploy to EKS

on:
  push:
    branches: 
      - dev
      - stage
      - main
    tags:
      - 'v*'

env:
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY: viva-rate-limiter

jobs:
  set-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      cluster_name: ${{ steps.set-env.outputs.cluster_name }}
    steps:
      - id: set-env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "cluster_name=viva-cluster-dev" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/stage" ]]; then
            echo "environment=stage" >> $GITHUB_OUTPUT
            echo "cluster_name=viva-cluster-stage" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "cluster_name=viva-cluster-dev" >> $GITHUB_OUTPUT
          fi

  build-and-deploy:
    needs: set-environment
    runs-on: ubuntu-latest
    environment: ${{ needs.set-environment.outputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Run tests with coverage
      run: |
        # Create coverage directory
        mkdir -p coverage
        
        # Run tests with coverage, excluding problematic packages
        go test \
          -coverprofile=coverage/coverage.out \
          -covermode=atomic \
          -coverpkg=./internal/...,./pkg/... \
          $(go list ./... | grep -v '/scripts' | grep -v '/queue' | grep -v '/worker')
        
        # Generate coverage summary
        go tool cover -func=coverage/coverage.out | tail -1
        
        # Extract coverage percentage for badge
        COVERAGE=$(go tool cover -func=coverage/coverage.out | tail -1 | awk '{print $3}' | sed 's/%//')
        echo "COVERAGE_PERCENTAGE=${COVERAGE}" >> $GITHUB_ENV
        
        # Generate HTML coverage report (optional)
        go tool cover -html=coverage/coverage.out -o coverage/coverage.html
        
        # Run go vet for code quality
        go vet $(go list ./... | grep -v '/scripts' | grep -v '/queue' | grep -v '/worker')

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-password: 'true'

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ needs.set-environment.outputs.cluster_name }}

    - name: Deploy to EKS
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        ENVIRONMENT: ${{ needs.set-environment.outputs.environment }}
      run: |
        # Create namespace first
        kubectl apply -f k8s/environments/$ENVIRONMENT/namespace.yaml
        
        # Create config map from k8s-specific config file
        kubectl create configmap viva-app-config --from-file=dev.yaml=configs/k8s-dev.yaml -n $ENVIRONMENT --dry-run=client -o yaml | kubectl apply -f -
        
        # Copy base files to environment directory to avoid kustomize security restrictions
        cp k8s/base/*.yaml k8s/environments/$ENVIRONMENT/
        
        # Update kustomization.yaml to reference local files
        cd k8s/environments/$ENVIRONMENT/
        cat > kustomization.yaml << EOF
        apiVersion: kustomize.config.k8s.io/v1beta1
        kind: Kustomization
        
        namespace: $ENVIRONMENT
        
        resources:
          - namespace.yaml
          - config.yaml
          - deployment.yaml
          - postgres.yaml
          - redis.yaml
        
        replicas:
          - name: viva-api
            count: 1
        EOF
        cd ../../..
        
        # Apply all resources using kustomize
        kubectl apply -k k8s/environments/$ENVIRONMENT/
        
        # Update image in deployment with specific tag
        kubectl set image deployment/viva-api viva-api=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -n $ENVIRONMENT
        
        # Wait for rollout to complete
        kubectl rollout status deployment/viva-api -n $ENVIRONMENT --timeout=300s